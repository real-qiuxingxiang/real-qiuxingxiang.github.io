<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Programming on Q's Blog</title><link>https://xingxiang.me/categories/programming/</link><description>Recent content in Programming on Q's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Thu, 21 Apr 2022 07:07:05 +0000</lastBuildDate><atom:link href="https://xingxiang.me/categories/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Python Excel 和 Json 互转</title><link>https://xingxiang.me/blog/1155/</link><pubDate>Thu, 21 Apr 2022 07:07:05 +0000</pubDate><guid>https://xingxiang.me/blog/1155/</guid><description>一、Excel 转 Json import pandas pandas.read_excel(&amp;#34;Data.xlsx&amp;#34;, sheet_name=0).to_json(&amp;#34;1.json&amp;#34;, orient=&amp;#34;records&amp;#34;, force_ascii=False) 二、Json 转 Excel import pandas pandas.read_json(&amp;#34;input.json&amp;#34;,dtype=str).to_excel(&amp;#34;output.xlsx&amp;#34;)</description></item><item><title>Python 批量按文件名关键字新建文件夹并归档文件</title><link>https://xingxiang.me/blog/1149/</link><pubDate>Sun, 27 Mar 2022 03:39:32 +0000</pubDate><guid>https://xingxiang.me/blog/1149/</guid><description>按需求修改规则使用，现在代码的规则对应的文件名为：xxx-xxx-xxx-xxx-xxx-xxx.jpg。
import os import shutil current_path = os.getcwd() print(&amp;#39;当前目录：&amp;#39;+current_path) filename_list = os.listdir(current_path) print(&amp;#39;当前目录下文件：&amp;#39;,filename_list) print(&amp;#39;正在分类整理进文件夹ing...&amp;#39;) for filename in filename_list: try: name1, name2, name3, name4, name5, name6 = filename.split(&amp;#39;-&amp;#39;) //规则 dirName = name1 + &amp;#34;-&amp;#34; + name2 + &amp;#34;-&amp;#34; + name3 + &amp;#34;-&amp;#34; + name4 + &amp;#34;-&amp;#34; + name5 //规则 try: os.mkdir(dirName) print(&amp;#39;创建文件夹：&amp;#39; + dirName) except: pass try: shutil.move(current_path+&amp;#39;/&amp;#39;+filename, current_path+&amp;#39;/&amp;#39;+dirName) print(filename+&amp;#39;转移成功！&amp;#39;) except Exception as e: print(&amp;#39;移动失败:&amp;#39; + e) except: pass print(&amp;#39;整理完毕！&amp;#39;)</description></item><item><title>Python 批量分割裁剪图片</title><link>https://xingxiang.me/blog/1147/</link><pubDate>Sun, 27 Mar 2022 03:20:01 +0000</pubDate><guid>https://xingxiang.me/blog/1147/</guid><description>放到图片目录下运行，以下代码为从中间将图片一分为二，请根据自己需要修改。
from PIL import Image import os path = os.getcwd() print(&amp;#39;当前目录：&amp;#39;+path) path_list = os.listdir(path) print(path_list) j=1 for i in path_list: a = open(os.path.join(path,i),&amp;#39;rb&amp;#39;) img = Image.open(a) w = img.width h = img.height print(&amp;#39;正在处理图片&amp;#39;,i,&amp;#39;宽&amp;#39;,w,&amp;#39;长&amp;#39;,h) box1 = (0,0,w*0.5,h) img1 = img.crop(box1) box2 = (w*0.5,0,w,h) img2 = img.crop(box2) img1.save(str(j)+&amp;#39;.jpg&amp;#39;, dpi=img1.info[&amp;#34;dpi&amp;#34;]) j = j + 1 img2.save(str(j)+&amp;#39;.jpg&amp;#39;, dpi=img2.info[&amp;#34;dpi&amp;#34;]) j = j + 1</description></item><item><title>Python 批量旋转图片</title><link>https://xingxiang.me/blog/1145/</link><pubDate>Sun, 27 Mar 2022 03:17:43 +0000</pubDate><guid>https://xingxiang.me/blog/1145/</guid><description>放到图片目录下运行。
from PIL import Image import os path = os.getcwd() print(&amp;#39;当前目录：&amp;#39;+path) path_list = os.listdir(path) print(path_list) for i in path_list: a = open(os.path.join(path,i),&amp;#39;rb&amp;#39;) img = Image.open(a) w = img.width h = img.height print(&amp;#39;正在处理图片&amp;#39;,i,&amp;#39;宽&amp;#39;,w,&amp;#39;长&amp;#39;,h) if h &amp;gt; w: img.rotate(180, expand=True).save(&amp;#39;0&amp;#39;+i, dpi=img.info[&amp;#34;dpi&amp;#34;]) print(&amp;#39;旋转成功&amp;#39;) print(&amp;#34;&amp;#39;{}&amp;#39;目录下所有图片已经保存到本文件目录下。&amp;#34;.format(path))</description></item><item><title>基于Django 开发的博客系统</title><link>https://xingxiang.me/blog/975/</link><pubDate>Wed, 22 Aug 2018 07:50:40 +0000</pubDate><guid>https://xingxiang.me/blog/975/</guid><description> Python 3.6.6 和 Django 2.1.5 MySQL xadmin 后台管理 Simditor Markdown 编辑器，图片 Drag and Drop 上传 代码高亮 RSS订阅 标签、阅读量 haystack 文章内容搜索 Valine 评论系统 集成 django-compressor，静态文件压缩 Usage 新建虚拟环境 git clone git@github.com:chiuxingxiang/Django-Blog.git virtualenv --python=&amp;amp;lt;py3path&amp;gt; venv . venv/bin/activate 安装依赖 pip install -r requirements.txt 数据库迁移 python manage.py makemigrations python manage.py migrate 创建管理员 python manage.py shell from django.contrib.auth.models import User user=User.objects.create_superuser(&amp;#39;用户名&amp;#39;,&amp;#39;邮箱&amp;#39;,&amp;#39;密码&amp;#39;) 创建搜索索引 python manage.py rebuild_index 压缩静态文件 python manage.py collectstatic python manage.py compress 首页 详情页 + 评论 Tag List xadmin后台 Simditor Markdown 文章编辑器 图片上传</description></item><item><title>Python 3.7 + BeautifulSoup 4 ：豆瓣 Top 250 爬虫</title><link>https://xingxiang.me/blog/966/</link><pubDate>Thu, 26 Jul 2018 13:22:46 +0000</pubDate><guid>https://xingxiang.me/blog/966/</guid><description>输出 .csv 文件，如图：
import requests import csv import random import time import socket import http.client from bs4 import BeautifulSoup def get_html(url, data = None): header = { &amp;#39;Accept&amp;#39;: &amp;#39;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8&amp;#39;, &amp;#39;Accept-Encoding&amp;#39;: &amp;#39;gzip, deflate, br&amp;#39;, &amp;#39;Accept-Language&amp;#39;: &amp;#39;zh-CN,zh;q=0.9,en;q=0.8,zh-TW;q=0.7&amp;#39;, &amp;#39;User-Agent&amp;#39;: &amp;#39;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36&amp;#39; } timeout = random.choice(range(80, 100)) while True: try: response = requests.get(url, headers = header, timeout = timeout) response.encoding = &amp;#39;utf-8&amp;#39; break except socket.</description></item><item><title>Python 3.7 + BeautifulSoup 4 + Scrapy ：简单爬虫实例</title><link>https://xingxiang.me/blog/962/</link><pubDate>Thu, 26 Jul 2018 13:15:47 +0000</pubDate><guid>https://xingxiang.me/blog/962/</guid><description>&lt;p>放假无聊，无聊写个爬虫，把本博客的文章列表页面（https://xingxiang.me/blog）扒下来&lt;/p></description></item><item><title>C语言 动态创建链表 Linked List</title><link>https://xingxiang.me/blog/914/</link><pubDate>Thu, 28 Dec 2017 05:46:56 +0000</pubDate><guid>https://xingxiang.me/blog/914/</guid><description>#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; typedef struct LinkedListNode { int data; struct LinkedListNode *next; } NODE; NODE *creatList(int n, int m) { NODE *temp=NULL; NODE *origin; NODE *extend; origin=(NODE*)malloc(sizeof(NODE)); temp=origin; origin-&amp;gt;next=NULL; for(int i=1;i&amp;amp;lt;=n;i+=1){ extend=(NODE*)malloc(sizeof(NODE)); extend-&amp;gt;data=i; extend-&amp;gt;next=origin-&amp;gt;next; origin-&amp;gt;next=extend; origin=origin-&amp;gt;next; } return temp; } void outputLink(NODE *head) { NODE *temp; temp=head-&amp;gt;next; printf(&amp;#34;HEAD&amp;#34;); while(temp){ printf(&amp;#34;-&amp;gt;%d&amp;#34;,temp-&amp;gt;data); temp=temp-&amp;gt;next; } } int main() { NODE *head; head=creatList(10,10); outputLink(head); return 0; }</description></item><item><title>C语言 大数加法 减法 乘法</title><link>https://xingxiang.me/blog/902/</link><pubDate>Mon, 27 Nov 2017 14:36:45 +0000</pubDate><guid>https://xingxiang.me/blog/902/</guid><description>#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;string.h&amp;gt; void stringReverse(char * p)//逆序字符串 { int i,len; char temp; len = strlen(p); for(i=0; i&amp;amp;lt;(len/2); i++) { temp = p[i]; p[i] = p[len-1-i]; p[len-1-i] = temp; } } char* getString()//动态字符串输入 { char *str; char *_str; int i=1; str=(char*)malloc(sizeof(char)*(i+1)); while((str[i-1]=getchar())!=&amp;#39;\n&amp;#39;){ i+=1; _str=(char*)malloc(strlen(str)+1); str[i-1]=&amp;#39;\0&amp;#39;; strcpy(_str,str); free(str); str=(char*)malloc(sizeof(char)*(i+1)); if(str==NULL){ free(_str); printf(&amp;#34;Not enough memory!&amp;#34;); return NULL; } strcpy(str,_str); free(_str); } str[i-1]=&amp;#39;\0&amp;#39;; return str; } char* remove_0(char *c)//删除0 { char *temp,*ch; temp=c; while(*temp){ if(*temp!</description></item><item><title>C语言 扫雷</title><link>https://xingxiang.me/blog/890/</link><pubDate>Mon, 04 Sep 2017 03:44:42 +0000</pubDate><guid>https://xingxiang.me/blog/890/</guid><description>Minesweeper in C
C语言扫雷
9*9
可以自动消除一大片
代码如下：
#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;time.h&amp;gt; #define N 9 //9*9扫雷 int sum = 10; //雷数目 int mine[N][N] = {0}; //雷数组 int map[N][N]; //显示数组 int markDirection[8][2] = {{0,1},{1,1},{1,0},{1,-1},{0,-1},{-1,-1},{-1,0},{-1,1}}; //8个方向 void printMap() //打印地图 { int i = 0,j = 0; for(i=0;i&amp;amp;lt;N;i++) { for(j=0;j&amp;amp;lt;N;j++) { printf(&amp;#34;%d &amp;#34;,map[i][j]); } printf(&amp;#34;\n&amp;#34;); } } void setMine() //埋雷 { srand((int)time(0)); int x=0,y=0; while(sum &amp;gt;= 0) { x = (rand()%(9-1+1))+1; y = (rand()%(9-1+1))+1; if(mine[x][y] !</description></item><item><title>树莓派3 + LCD1602 硬件连接 代码</title><link>https://xingxiang.me/blog/843/</link><pubDate>Sun, 01 Jan 2017 10:07:22 +0000</pubDate><guid>https://xingxiang.me/blog/843/</guid><description>LCD 1602 树莓派Model B Pin示意图： 硬件连接（从上到下对应LCD1602 1-16号Pin） Pin 用法 VSS 接地 VDD 接5V电源 VO 液晶对比度调节，接电位器（需要一个10k电位器）中间的引脚，电位器两边的引脚分别接5V和接地。 RS 寄存器选择，接GPIO14 RW 读写选择，接地，表示写模式 EN 使能信号，接GPIO15 D0 数据位0，4位工作模式下不用，不接 D1 数据位1，4位工作模式下不用，不接 D2 数据位2，4位工作模式下不用，不接 D3 数据位3，4位工作模式下不用，不接 D4 数据位4，接GPIO17 D5 数据位5，接GPIO18 D6 数据位6，接GPIO27 D7 数据位7，接GPIO22 A 液晶屏背光+，接5V K 液晶屏背光-，接地 接好后通电就会显示一行空白，一行黑格子，如果什么也不显示，调节电位器电阻即可。
代码 Github ： https://github.com/lifanxi/rpimenu
解压后有 Adafruit_CharLCD.py 文件，运行此文件在LCD上会显示两行字符：LCD 1602 Test, 123456789ABCDEF。
只需要在此文件上进行一下修改就可以自定义显示你想要的内容了（如果不是按上表的GPIO，记住修改）。</description></item><item><title>树莓派3 定时上传CUP温度到 yeelink 代码</title><link>https://xingxiang.me/blog/842/</link><pubDate>Fri, 30 Dec 2016 13:24:03 +0000</pubDate><guid>https://xingxiang.me/blog/842/</guid><description>CPUtemperature.py 代码
#!/usr/bin/env python import requests import json import time file = open(&amp;#34;/sys/class/thermal/thermal_zone0/temp&amp;#34;) CPUtemperature = float(file.read()) / 1000 file.close print &amp;#34;CPU Temperature :&amp;#34;, CPUtemperature topost_CPUtemperature_payload={&amp;#39;value&amp;#39;:CPUtemperature} url_CPUtemperature=&amp;#39;你的传感器URL&amp;#39; header={&amp;#39;U-ApiKey&amp;#39;:&amp;#39;你的Apikey&amp;#39;, &amp;#39;content-type&amp;#39;: &amp;#39;application/json&amp;#39;} post_CPUtemperature = requests.post(url_CPUtemperature,headers=header,data=json.dumps(topost_CPUtemperature_payload)) yeelink.sh 代码
sudo python /home/pi/yeelink.py 运行
sudo chmod +x /home/pi/yeelink.sh 设置定时5分钟运行一次
sudo crontab -e 加入
*/5 * * * * /home/pi/yeelink.sh</description></item><item><title>树莓派3 + DHT11 温湿度传感器 + 定时上传 yeelink 代码 + 数据过滤</title><link>https://xingxiang.me/blog/840/</link><pubDate>Fri, 30 Dec 2016 01:19:44 +0000</pubDate><guid>https://xingxiang.me/blog/840/</guid><description>DHT11.py 代码
#!/usr/bin/python import RPi.GPIO as GPIO import time import requests import json #Read data from DHT11 def DHT11(): channel = 17 data = [] j = 0 GPIO.setmode(GPIO.BCM) time.sleep(1) GPIO.setup(channel, GPIO.OUT) GPIO.output(channel, GPIO.LOW) time.sleep(0.02) GPIO.output(channel, GPIO.HIGH) GPIO.setup(channel, GPIO.IN) while GPIO.input(channel) == GPIO.LOW: continue while GPIO.input(channel) == GPIO.HIGH: continue while j &amp;amp;lt; 40: k = 0 while GPIO.input(channel) == GPIO.LOW: continue while GPIO.input(channel) == GPIO.HIGH: k += 1 if k &amp;gt; 100: break if k &amp;amp;lt; 8: data.</description></item></channel></rss>